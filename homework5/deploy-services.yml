apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-config
  labels:
    app: auth
data:
  POSTGRES_DB: "auth"
  POSTGRES_USER: "auth"
  POSTGRES_PASSWORD: "auth"
  POSTGRES_HOST: "auth-postgres.default"
  POSTGRES_PORT: "5432"
  DJANGO_SETTINGS_MODULE: "uauth.settings.prod"
  PROFILES_SERVICE: "profiles-service.default"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: profiles-config
  labels:
    app: profiles
data:
  POSTGRES_DB: "profiles"
  POSTGRES_USER: "profiles"
  POSTGRES_PASSWORD: "profiles"
  POSTGRES_HOST: "profiles-postgres.default"
  POSTGRES_PORT: "5432"
  DJANGO_SETTINGS_MODULE: "profiles.settings.prod"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: auth-postgres-pv-volume
  labels:
    type: local
    app: auth-postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/auth"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: auth-postgres-pv-claim
  labels:
    app: auth-postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: profiles-postgres-pv-volume
  labels:
    type: local
    app: profiles-postgres
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data/profiles"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: profiles-postgres-pv-claim
  labels:
    app: profiles-postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-postgres
  template:
    metadata:
      labels:
        app: auth-postgres
    spec:
      containers:
        - name: auth-postgres
          image: postgres:alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: auth-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: auth-postgres-pv-claim
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: profiles-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: profiles-postgres
  template:
    metadata:
      labels:
        app: profiles-postgres
    spec:
      containers:
        - name: profiles-postgres
          image: postgres:alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: profiles-config
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: profiles-postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: auth-postgres
  labels:
    app: auth-postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: auth-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: profiles-postgres
  labels:
    app: profiles-postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: profiles-postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
      version: v0.1
  template:
    metadata:
      labels:
        app: auth
        version: v0.1
    spec:
      initContainers:
      - name: auth-check-db-ready
        image: postgres:alpine
        envFrom:
          - configMapRef:
              name: auth-config
        command:
          - sh
          - "-c"
          - |
            until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
            do echo waiting for database; sleep 2; done;
      containers:
      - name: auth
        image: msergei/auth-service:v0.3
        imagePullPolicy: Always
        ports:
          - name: auth-port
            containerPort: 8000
        command:
          - sh
          - "-c"
          - |
            ./manage.py migrate; gunicorn uauth.wsgi -b 0.0.0.0:8000 --workers=4;
        envFrom:
          - configMapRef:
              name: auth-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: profiles
spec:
  replicas: 1
  selector:
    matchLabels:
      app: profiles
      version: v0.1
  template:
    metadata:
      labels:
        app: profiles
        version: v0.1
    spec:
      initContainers:
      - name: profiles-check-db-ready
        image: postgres:alpine
        envFrom:
          - configMapRef:
              name: profiles-config
        command:
          - sh
          - "-c"
          - |
            until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT;
            do echo waiting for database; sleep 2; done;
      containers:
      - name: profiles
        image: msergei/profiles-service:v0.3
        imagePullPolicy: Always
        command:
          - sh
          - "-c"
          - |
            ./manage.py migrate; gunicorn profiles.wsgi -b 0.0.0.0:8000 --workers=4;
        ports:
          - name: profiles-port
            containerPort: 8000
        envFrom:
          - configMapRef:
              name: profiles-config
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth
  ports:
    - protocol: TCP
      port: 8000
      targetPort: auth-port
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: profiles-service
spec:
  selector:
    app: profiles
  ports:
    - protocol: TCP
      port: 8001
      targetPort: profiles-port
  type: NodePort
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: hello-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: arch.homework
      http:
        paths:
          - path: /api/auth/.*
            backend:
              serviceName: auth-service
              servicePort: 8000
          - path: /api/token/.*
            backend:
              serviceName: auth-service
              servicePort: 8000
          - path: /api/profiles/.*
            backend:
              serviceName: profiles-service
              servicePort: 8001
