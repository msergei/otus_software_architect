{
	"info": {
		"_postman_id": "2bd22857-fcd8-4cfa-b375-1f88df9e4c1d",
		"name": "project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get currencies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/currencies/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"currencies",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var last_id = pm.collectionVariables.get(\"last_id\");",
							"last_id = parseInt(last_id);",
							"last_id++;",
							"pm.collectionVariables.set(\"last_id\", last_id);",
							"",
							"pm.collectionVariables.set(\"username1\", \"user\"+last_id);",
							"",
							"pm.collectionVariables.set(\"password\", \"pass\"+_.random(0, 10000)+_.random(0, 10000)+_.random(0, 10000));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username1}}\",\n    \"password\": \"{{password}}\",\n    \"email\": \"some@google.ru\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{auth_port}}/api/auth/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"api",
						"auth",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON = JSON.parse(responseBody)",
							"pm.collectionVariables.set(\"user1_jwt\", responseJSON[\"access\"])",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username1}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{auth_port}}/api/token/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"api",
						"token",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var last_id = pm.collectionVariables.get(\"last_id\");",
							"last_id = parseInt(last_id);",
							"last_id++;",
							"pm.collectionVariables.set(\"last_id\", last_id);",
							"",
							"pm.collectionVariables.set(\"username2\", \"user\"+last_id);",
							"",
							"pm.collectionVariables.set(\"password\", \"pass\"+_.random(0, 10000)+_.random(0, 10000)+_.random(0, 10000));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username2}}\",\n    \"password\": \"{{password}}\",\n    \"email\": \"some2@google.ru\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{auth_port}}/api/auth/users/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"api",
						"auth",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var responseJSON = JSON.parse(responseBody)",
							"pm.collectionVariables.set(\"user2_jwt\", responseJSON[\"access\"])",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username2}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{auth_port}}/api/token/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"api",
						"token",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create wallet BTC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"wallet\": 10000,\n    \"currency\": \"BTC\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create wallet ETH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"wallet\": 10000,\n    \"currency\": \"ETH\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallets user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallets user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order BTC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var last_id = pm.collectionVariables.get(\"unique_key\");",
							"last_id = parseInt(last_id);",
							"last_id++;",
							"pm.collectionVariables.set(\"unique_key\", last_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 100,\n    \"currency_from\": \"BTC\",\n    \"currency_to\": \"ETH\",\n    \"unique_key\": \"{{unique_key}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order ETH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var last_id = pm.collectionVariables.get(\"unique_key\");",
							"last_id = parseInt(last_id);",
							"last_id++;",
							"pm.collectionVariables.set(\"unique_key\", last_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 100,\n    \"currency_from\": \"ETH\",\n    \"currency_to\": \"BTC\",\n    \"unique_key\": \"{{unique_key}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get orders BTC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get orders ETH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/orders/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallets user1 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get wallets user2 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{order_port}}/api/wallets/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{order_port}}",
					"path": [
						"api",
						"wallets",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notify user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user1_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{notify_port}}/api/notifications/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{notify_port}}",
					"path": [
						"api",
						"notifications",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get history user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// pm.test(\"Test order slot fail\", function () {",
							"//     var jsonData = pm.response.json();",
							"//     pm.expect(jsonData[jsonData.length - 1].success).to.eql(false);",
							"//     pm.expect(jsonData[jsonData.length - 1].reason).to.eql(\"Can not get the delivery slot\");",
							"// });",
							"",
							"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
							"tests[\"[INFO] Response: \" + responseBody] = true;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{user2_jwt}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{notify_port}}/api/history/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{notify_port}}",
					"path": [
						"api",
						"history",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "auth_port",
			"value": "80"
		},
		{
			"key": "user1_jwt",
			"value": ""
		},
		{
			"key": "billing_port",
			"value": "80"
		},
		{
			"key": "last_id",
			"value": "0"
		},
		{
			"key": "username1",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "order_port",
			"value": "80"
		},
		{
			"key": "item_to_buy",
			"value": "1"
		},
		{
			"key": "user2_jwt",
			"value": ""
		},
		{
			"key": "username2",
			"value": ""
		},
		{
			"key": "unique_key",
			"value": "0"
		},
		{
			"key": "notify_port",
			"value": "80"
		}
	]
}