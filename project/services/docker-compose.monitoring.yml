version: '2.1'

networks:
  monitor-net:
    driver: bridge

volumes:
  psql: {}
  redis: {}

services:

  redis:
    image: redis:alpine
    volumes:
      - redis:/data
    restart: always
    networks:
      - monitor-net

  db:
    image: msergei/postgres:v0.2
    volumes:
      - psql:/var/lib/postgresql/data
    environment:
      POSTGRES_MULTIPLE_DATABASES: auth,order,notify
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
    healthcheck:
      test: [ "CMD-SHELL", "cat /var/lib/postgresql/data/ready" ]
      interval: 10s
      timeout: 10s
      retries: 100
    networks:
      - monitor-net

  auth:
    image: msergei/auth-service:v0.6
    command: sh -c "sleep 10; ./manage.py migrate && gunicorn uauth.wsgi -b 0.0.0.0:8000 --workers=1 --timeout 10;"
    ports:
      - 8003:8000
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=auth
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - db
      - redis
    networks:
      - monitor-net

  order:
    image: msergei/order-service:v0.3
    command: sh -c "sleep 10; ./manage.py migrate && gunicorn order.wsgi -b 0.0.0.0:8000 --workers=1 --timeout 10;"
    ports:
      - 8001:8000
    links:
      - db:postgres
      - redis:redis
    networks:
      - monitor-net
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - auth
      - db
      - redis

  notify:
    image: msergei/notify-service:v0.3
    command: sh -c "sleep 10; ./manage.py migrate && gunicorn notify.wsgi -b 0.0.0.0:8000 --workers=1 --timeout 10;"
    ports:
      - 8002:8000
    networks:
      - monitor-net
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=notify
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - redis
      - db
      - auth
      - order

  mediator:
    image: msergei/order-service:v0.3
    command: sh -c "sleep 10; ./manage.py order_mediator;"
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - auth
      - db
      - redis
      - order
    networks:
      - monitor-net

  matcher:
    image: msergei/order-service:v0.3
    command: sh -c "sleep 10; ./manage.py order_matcher;"
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - auth
      - db
      - redis
      - order
      - mediator
    networks:
      - monitor-net

  signer:
    image: msergei/order-service:v0.3
    command: sh -c "sleep 10; ./manage.py order_signer;"
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=order
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - auth
      - db
      - redis
      - order
      - mediator
      - matcher
    networks:
      - monitor-net

  fetcher:
    image: msergei/notify-service:v0.3
    command: sh -c "sleep 10; ./manage.py fetch_events;"
    links:
      - db:postgres
      - redis:redis
    environment:
      - POSTGRES_DB=notify
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=user
    depends_on:
      - redis
      - db
      - auth
      - order
      - notify
      - mediator
      - signer
      - matcher
    networks:
      - monitor-net
